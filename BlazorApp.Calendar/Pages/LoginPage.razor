@page "/singin"
@using BlazorApp.Calendar.Models
@using BlazorApp.Calendar.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Cryptography
@using System.Text
@inject UserRegistersContext dbContext
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@rendermode RenderMode.InteractiveServer

<EditForm Model="@User" OnSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-xl-6 col-md-8 col-12" style="margin-top: 10px">
        <input id="input_emailaddress" @onkeypress="OnKeyPress" type="text" @bind-value="User.Email" class="form-control dark-theme-textbox" placeholder="email address">
    </div>
    <br />
    <div class="col-xl-6 col-md-8 col-12">
        <input id="input_password" @onkeypress="OnKeyPress" type="password" @bind-value="User.Password" class="form-control dark-theme-textbox" placeholder="password">
    </div>
    <br />
    <div class="col-xl-6 col-md-8 col-12 row">
        <div class="col-xl-2 col-lg-2 col-md-6 col-sm-3 col-3">
            <button id="button_login" type="submit" class="btn btn-primary">Login</button>
        </div>
        <div class="col-xl-5 col-lg-5 col-md-6 col-sm-9 col-9">
            <a style="font-weight: bold;" href="/register">Create an account</a>
        </div>
    </div>
</EditForm>
<p>@Message</p>

@code
{
    private string Message{ get; set; }

    private UsersRegister User = new();

    private async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {

        }
        //await AuthenticateJWT();
    }

    private async void Submit()
    {
        string email = User.Email;
        string password = User.Password;

        if (IsObjectExists(User.Email))
        {
            if (IsLoginValid(password))
            {
                //     var claims = new List<Claim> { new Claim(ClaimTypes.Name, User.Email) };
                //     // создаем объект ClaimsIdentity
                //     ClaimsIdentity claimsIdentity = new ClaimsIdentity(claims, "Cookies");
                //     // установка аутентификационных куки
                //     // await AuthenticationStateProvider.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity));
                //     var user = new ClaimsPrincipal(claimsIdentity);
                //     var authenticationState = new AuthenticationState(user);

                //     await HttpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, user);
                // Создание и авторизация куки
                // await HttpContextAccessor.HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme); ;

                // var claims = new List<Claim> { new Claim(ClaimTypes.Name, User.Email) };

                // var identity = new ClaimsIdentity(claims, "LoginScheme");

                // var principal = new ClaimsPrincipal(identity);

                // await HttpContextAccessor.HttpContext.SignInAsync("LoginScheme", principal, new AuthenticationProperties
                //     {
                //         IsPersistent = true, // Если хотите сохранить авторизацию через межсессионное время
                //         ExpiresUtc = DateTime.UtcNow.AddMinutes(360) // Установка времени истечения куки
                //     });
                NavigationManager.NavigateTo($"auth/singin?email={User.Email}", true);
            }
            else
            {
                Message = "Не верный пароль!";
            }
        }
        else
        {
            Message = "Пользователь не найден!";
        }
    }
    public bool IsObjectExists(string inputPropertyValue)
    {
        return dbContext.Users.Any(e => e.Email == inputPropertyValue);
    }

    public bool IsLoginValid(string password)
    {
        using (SHA256 sha = SHA256.Create())
        {
            byte[] hashValue = sha.ComputeHash(Encoding.UTF8.GetBytes(password));

            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < hashValue.Length; i++)
            {
                builder.Append(hashValue[i].ToString("x2")); // Преобразуем байты хэша в шестнадцатеричное представление
            }

            string hash = builder.ToString();

            var user = dbContext.Users.FirstOrDefault(u => u.Password == hash);
            return user != null;
        }
    }
}
