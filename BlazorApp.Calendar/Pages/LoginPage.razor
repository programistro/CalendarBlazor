@page "/singin"
@using BlazorApp.Calendar.Models
@using BlazorApp.Calendar.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Cryptography
@using System.Text
@inject UserRegistersContext dbContext
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@rendermode RenderMode.InteractiveServer

@* <EditForm Model="@User" OnSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-xl-6 col-md-8 col-12" style="margin-top: 10px">
        <input id="input_emailaddress" @onkeypress="OnKeyPress" type="text" @bind-value="User.Email" class="form-control dark-theme-textbox" autocomplete="off" placeholder="email">
    </div>
    <br />
    <div class="col-xl-6 col-md-8 col-12">
        <input id="input_password" @onkeypress="OnKeyPress" type="password" @bind-value="User.Password" class="form-control dark-theme-textbox" placeholder="пароль">
    </div>
    <br />
    <div class="col-xl-6 col-md-8 col-12 row">
        <div class="col-xl-2 col-lg-2 col-md-6 col-sm-3 col-3">
            <button id="button_login" type="submit" class="btn btn-primary">Войти</button>
        </div>
        <div class="col-xl-5 col-lg-5 col-md-6 col-sm-9 col-9">
            <a style="font-weight: bold;" href="/register">Создать аккаунт</a>
        </div>
    </div>
</EditForm> *@

<div style="max-width: 800px; margin-top: -25px; margin-left: -50px;">
    <RadzenTemplateForm TItem="@UsersRegister" Data=@User Submit=@Submit InvalidSubmit=@OnInvalidSubmit>
        <RadzenStack Gap="1rem" Class="rz-p-sm-12">
            <RadzenFormField Text="Email">
                <ChildContent>
                    <RadzenTextBox Name="Email" @bind-Value=@User.Email AutoComplete="false"/>
                </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Пароль">
                <ChildContent>
                    <RadzenPassword Name="Password" @bind-Value=@User.Password AutoComplete="false"/>
                </ChildContent>
            </RadzenFormField>
            <div>
                <RadzenButton ButtonType="ButtonType.Submit" Style="max-width: 90px;" Text="Войти"></RadzenButton>
                <a style="font-weight: bold; margin-left: 12px;" href="/register">Создать аккаунт</a>
            </div>
        </RadzenStack>
    </RadzenTemplateForm>
</div>

<p>@Message</p>

@code
{
    private string Message{ get; set; }

    private UsersRegister User = new();

    private async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {

        }
    }

    private async void Submit()
    {
        string email = User.Email;
        string password = User.Password;

        if(User.Email != "" || User.Email != null || User.Password != null || User.Password != "")
        {
            if (IsObjectExists(User.Email))
            {
                if (IsLoginValid(password))
                {
                    NavigationManager.NavigateTo($"auth/singin?email={User.Email}", true);
                }
                else
                {
                    Message = "Не верный пароль!";
                }
            }
            else
            {
                Message = "Пользователь не найден!";
            }
        }
        else
        {
            Message = "Поля не заполнены";
        }
    }
    public bool IsObjectExists(string inputPropertyValue)
    {
        return dbContext.Users.Any(e => e.Email == inputPropertyValue);
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Message = "Не заполнены поля";
    }

    public bool IsLoginValid(string password)
    {
        if(password == "" || password == null)
            return false;
        
        using (SHA256 sha = SHA256.Create())
        {
            byte[] hashValue = sha.ComputeHash(Encoding.UTF8.GetBytes(password));

            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < hashValue.Length; i++)
            {
                builder.Append(hashValue[i].ToString("x2")); // Преобразуем байты хэша в шестнадцатеричное представление
            }

            string hash = builder.ToString();

            var user = dbContext.Users.FirstOrDefault(u => u.Password == hash);
            return user != null;
        }
    }
}
