@using BlazorApp.Calendar.Models
@using Radzen
@using Radzen.Blazor
@using BlazorApp.Calendar.Data
@inject DialogService DialogService
@inject AppointmentContext dataContext
@inject TooltipService TooltipService

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                 TextProperty="Text" SelectedIndex="2"
    SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender
                 AppointmentMouseEnter=@OnAppointmentMouseEnter AppointmentMouseLeave=@OnAppointmentMouseLeave>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@* <EventConsole @ref=@console /> *@

@code {
    RadzenScheduler<Appointment> scheduler;
    // EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Appointment> appointments = new List<Appointment>();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        appointments = dataContext.Appointments.ToList();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year")
        {
            Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Добавить",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);

                dataContext.Appointments.Add(data);
                
                dataContext.SaveChanges();
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        var copy = dataContext.Appointments.Find(args.Data.ID);
        copy.Start = args.Data.Start;
        copy.End = args.Data.End;
        copy.Text = args.Data.Text;
        copy.Client = args.Data.Client;
        copy.Teacher = args.Data.Teacher;


        var data = await DialogService.OpenAsync<EditAppointmentPage>("Редактировать", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
            args.Data.Client = data.Client;
            args.Data.Teacher = data.Teacher;
            args.Data.ID = data.ID;
            
            dataContext.Appointments.Update(copy);
            
            dataContext.SaveChanges();
        }
        
        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
    void OnAppointmentMouseEnter(SchedulerAppointmentMouseEventArgs<Appointment> args)
    {
        TooltipService.Open(args.Element, ts =>
            @<RadzenStack Orientation="Orientation.Vertical" Gap="0" Class="rz-p-6" Style="min-width: 250px; max-width: 500px;">
                <RadzenText TextStyle="TextStyle.H6" Class="rz-mb-4" Style="color: var(--rz-tooltip-color);">
                    С @args.Data.Client будет заниматься @args.Data.Teacher
                </RadzenText>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color); width: 54px;">
                        <strong>Начало</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color);">
                        @args.Data.Start.ToString("hh:mm ⋅ dddd, MMMM d")
                    </RadzenText>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color); width: 50px;">
                        <strong>Конец</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-tooltip-color);">
                        @args.Data.End.ToString("hh:mm ⋅ dddd, MMMM d")
                    </RadzenText>
                </RadzenStack>
            </RadzenStack>, new TooltipOptions { Position = TooltipPosition.Right, Duration = null });
    }

    void OnAppointmentMouseLeave(SchedulerAppointmentMouseEventArgs<Appointment> args)
    {
        TooltipService.Close();
    }
}